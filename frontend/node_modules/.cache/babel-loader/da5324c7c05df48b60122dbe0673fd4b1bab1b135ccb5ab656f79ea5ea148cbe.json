{"ast":null,"code":"var _jsxFileName = \"/home/dog/ino/WiFi-tempRH/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport snowflake from './snowflaketime.svg';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport API from './api/API.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [current, setCurrent] = useState(null);\n  const [data, setData] = useState(null);\n\n  // Reset displayed data on screen on load\n  useEffect(() => {\n    // Gets data from a backend request, then sets 'data' to the result\n    API.getCurrent().then(json => setCurrent(json));\n    API.getHour().then(json => {\n      const timestampData = json.map(dataPoint => dataPoint.timestamp);\n      const tempData = json.map(dataPoint => dataPoint.temp);\n      const rhData = json.map(dataPoint => dataPoint.rh);\n      console.log(`Timestamp Data: ${timestampData}`);\n      console.log(`Temperature Data: ${tempData}`);\n      console.log(`RH Data: ${rhData}`);\n      setData(json);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: snowflake,\n        className: \"App-logo\",\n        alt: \"SMOW\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), !current ? 'Loading...' : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temp: \", current.temp, \"\\xB0F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"RH: \", current.rh, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), !data ? 'Loading...' : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamps: \", data.map(dataPoint => dataPoint.temp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temps: \", data.map(dataPoint => dataPoint.temp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"RH's: \", data.map(dataPoint => dataPoint.temp)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8TIiSK8HlzMJBzardBZc+ZhLrR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["snowflake","React","useState","useEffect","API","jsxDEV","_jsxDEV","App","_s","current","setCurrent","data","setData","getCurrent","then","json","getHour","timestampData","map","dataPoint","timestamp","tempData","temp","rhData","rh","console","log","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dog/ino/WiFi-tempRH/frontend/src/App.js"],"sourcesContent":["import snowflake from './snowflaketime.svg';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport API from './api/API.js';\n\nfunction App() {\n\n  const [current, setCurrent] = useState(null);\n  const [data, setData] = useState(null);\n\n  // Reset displayed data on screen on load\n  useEffect(() => {\n    // Gets data from a backend request, then sets 'data' to the result\n    API.getCurrent().then(json => setCurrent(json));\n    API.getHour().then(json => {\n      const timestampData = json.map(dataPoint => dataPoint.timestamp);\n      const tempData = json.map(dataPoint => dataPoint.temp);\n      const rhData= json.map(dataPoint => dataPoint.rh);\n      console.log(`Timestamp Data: ${timestampData}`);\n      console.log(`Temperature Data: ${tempData}`);\n      console.log(`RH Data: ${rhData}`);\n      setData(json);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={snowflake} className=\"App-logo\" alt=\"SMOW\" />\n        \n        {/* If no current data, display \"Loading\". If there is current data, display it! */}\n        {!current ? 'Loading...' :\n          <div className=\"dataWrapper\">\n            <p>Temp: {current.temp}&deg;F</p>\n            <p>RH: {current.rh}%</p>\n          </div>\n        }\n\n        {!data ? 'Loading...' :\n          <div className=\"dataWrapper\">\n            <p>Timestamps: {data.map(dataPoint => dataPoint.temp)}</p>\n            <p>Temps: {data.map(dataPoint => dataPoint.temp)}</p>\n            <p>RH's: {data.map(dataPoint => dataPoint.temp)}</p>\n          </div>\n        }\n\n      </header>\n    </div>\n  );\n\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}